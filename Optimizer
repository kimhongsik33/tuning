## 1. Optimizer
---
### 1.1 Optimizer란?

  ・DBMS의 두뇌.
  ・아래와 같은 실행계획을 세우는 일을 담당하는 것이 바로 Optimzer이다.
  ・가장 효율적인 방법으로 SQL을 수행할 최적의 처리 경로를 생성해주는 DBMS핵심 엔진이다.

    SELECT E.ename
    FROM   emp E
    WHERE  E.empno='12345';


 위의 SQL을 실행하면 다음과 같은 처리가 내부에서 일어난다.
(1) 문법적인 오류가 없는지 검사한다.
(2) 입력받은 SQL이 이전에 실행한 적이 있는지 메모리를 검사한다.
(3) 이전에 실행한 기록이 있다면, 기존에 실행했던 방식으로 실행한다.
(4) 이전에 실행한 기록이 없다면, SQL에서 사용하고 있는 객체들에 대한 접근 권한 유무를 체크하고,
    SQL을 어떤 방식으로 처리할 것인지에 대한 <font color="red">***EXPLAIN PLAN***</font> 을 세운다.

> (3)방식으로 처리되는 것을 <font color="blue">`SOFT PARSING`</font> 이라한다.
> (4)방식으로 처리되는 것을 <font color="blue">`HARD PARSING`</font> 이라한다.

### 1.2 Optimizer의 종류

#### 1.2.1 Rule Based Optimzer

> ORACLE 8 까지 DBMS에서 기본으로 설정된 옵티마이저.
> 처리방식의 우선순위를 정해 놓고 가능한 한 우선순위가 앞서는 것을 채택하는 방식.
> 이 우선순위를 RANK라고 한다.

 ##### ■Rule Based Optimzer의 우선순위

 |우선순위|내용|
 |-:-|:--|
 |1|ROWID에 의한 단일행 실행|
 |2|Cluster Join에 의한 단일행 실행|
 |3|Hash Cluster Key에 의한 단일행 실행|
 |4|Unique key 또는 Primary key에 의한 단일행 실행|
 |5|Cluster Join|
 |6|Hash Cluster Key|
 |7|Indexed Cluster Key|
 |8|결합 인덱스|
 |9|단일 컬럼 인덱스|
 |10|인덱스에 의한 컬럼의 Bounded Range|
 |11|인덱스에 의한 컬럼의 Unbounded Range|
 |12|Sort Merge Join|
 |13|인덱스로 구성된 컬럼의 Max 또는 Min처리|
 |14|인덱스로 구성된 컬럼의 Order By|
 |15|Full Table Scan|

##### ■Rule Based Optimzer의 장점

   1) 우선하는 방식의 순위가 정해져 있기 때문에 실행하고자 하는 SQL의 실행방식 및 절차를 미리 예측할 수 있다.

##### ■Rule Based Optimzer의 단점

  1) 아래의 SQL을 확인.


        SELECT E.ename
        FROM   emp E
        WHERE  E.gender = 'man'
          AND  E.hiredate BETWEEN '20130101' AND '20130103'

  emp테이블의 gender column과 hiredate columne에 각각 인덱스가 생성되어 있다고 가정했을 때,
  여직원이 지나치게 많은 회사가 아니라면 성별이 남자인 직원을 걸러내는데 인덱스를 사용하는 것 보다는 3일 사이에 입사한 직원들을 걸러내는 데 인덱스를 사용하는 것이 효율적일 것이다.
  하지만 <font color="blue">`Rule Based Optimzer`</font>을 사용하면,
  등호조건을 사용하고 있는 gender column의 인덱스를 사용하여 검색을 할 것이고 이는 결과적으로 불필요한 데이터를 많이 읽게 되는 결과를 가져온다.

  2) 1)의 결과대로 <font color="blue">`Rule Based Optimzer`</font>는 대상 테이블에 몇개의 레코드가 저장되어 있는지 신경쓰지 않는다.

  3) 1)의 결과대로 <font color="blue">`Rule Based Optimzer`</font>는 각 테이블의 컬럼에 저장된 데이터들이 어떤 분포로 저장되어 있는지도 신경 쓰지 않고 오로지 규칙에 기반하여 작동한다.

그 이외의 단점들.
> 1. 힌트를 사용할 수 없다.
> 2. HASH JOIN을 사용할 수 없다.


#### 1.2.2 Cost Based Optimizer

Oracle에서 정의하는 COST이란?
> 실행에 필요한 예측 시간을 Single Block I/O Time으로 나눈값.

##### (1) 동작방식

ORACLE Optimzer의 경우 하나의 SQL을 전달 받으면 최대 2,000개의 실행 계획을 만들고 각 비용을 계산한뒤 가장 적은 비용이 드는 실행 계획을 사용자에게 제시한다. 처리 순서를 보면 아래와 같다.

###### Query Transformer
> Parsing 과정을 거친 SQL은 PARSING TREE 형태로 변형되어 Query Transformer 넘겨진다.
> 이때 Query Transformer는 결과값에 영향을 주지 않는 선에서 좀 더 나은 실행계획이 가능한지를 판단하여 변환하는 작업을 담당한다.

###### Estimator
> 수행에 드는 총 비용을 계산하는 역할을 한다.
> 시스템상의 통계정보와 SQL에서 사용하고자 하는 객체들의 통계정보를 딕셔너리로부터 수집하여 총 비용을 도출한다.

###### Plan Generator
> Estimator를 통해 계산된 값들을 토대로 후보군의 계획들을 도출 한 후, Plan Generator를 거쳐 최종 선발된 실행 계획은 Row Source Generator를 통해 출력 가능한 코드로 바뀐다.

##### (2) 모드

비용 계산을 기반하여 실행계획을 세우는 Cost Based Optimizer는
OPTIMIZER_MODE라는 파라미터로 각각의 모드를 지정할 수 있고,
그 모드 종류는 다음과 같은 종류로 구분 할 수 있다.

###### CHOOSE
> CBO도입 초기 DBMS 사용자나 관리자들의 접근성을 높이기 위해 규칙 기반 / 비용 기반 옵티마이저를 취사 선택 할 수 있도록 하는 모드.
현재는 거의 사용하지 않는다.

###### FIRST_ROWS
> 옵티마이저가 처리 결과 중 첫 건을 출력하는 데까지 걸리는 최소 시간중심으로 실행 계획을 작성 하는 모드.
>
> 비용 기반/ 규칙기반 옵티마이저의 혼용 형태로 첫 건을 도출하는 최단 시간을 계산하는 과정에서 전체 건수가 테이블의 10%를 넘는 대량의 데이터의 경우 FULL TABLE SCAN이 유리함에 불구하고 INDEX SCAN을 선택하는 단점이 존재한다.
>
> 따라서 ORACLE에서 제공하는 메뉴얼 에서도 FIRST_ROWS 모드 보다는 FIRST_ROWS_n 모드를 권장하고 있다.

###### FIRST_ROWS_n
> FIRST_ROWS의 단점을 보완한 모드로 비용만을 고려하여 실행 계획을 세우기 때문에 CBO의 목적을 가장 잘 만족하는 모드이다. 이 모드는 SQL의 실행 결과를 출력하는 데 까지 걸리는 응답 속도 최적화에 초점이 맞춰져 있다.

###### ALL_ROWS
> SQL 실행 결과 전체에 최적화한 실행계획을 세우는 모드로. 마지막으로 출력될 행까지 최소한의 자원을 사용하여 최대한 빨리 가져오게 하는 실행 계획을 세운다.
>
> ORACLE 10g 이후로 기본 값으로 설정 되어있다.


### 1.3 Optimizer최적화를 위한 고려사항

##### (1)통계정보란?

 + SQL 튜닝에 있어 가장 큰 영향을 미치는 요소중 하나.
 + <font color="blue">`Cost Based Optimzer`</font>가 `Explain Plan`을 수립하기 위해 참고하는 정보.

###### 통계정보의 종류

TYPE  | 세부정보내역
--|--
TABLE  | TABLE 전체 행의 수
  |  TABLE이 차지하고 있는 전체 블록 수
  |  TABLE의 행들이 갖는 평균 길이
COLUMN  |  COLUMN 값의 종류
  |  COLUMN 내 NULL값의 분포도
  |  COLUMN 값의 평균 길이
  |  COLUMN 내 데이터 분포의 추정치 등
INDEX  |  `LEAF BLOCK`수:데이터를 보관하는 블록 수
  | `LEVELS`:인덱스 트리의 LEVEL정보
  | `CLUSTERING FACTOR`:접근하고자 하는 데이터가 모여 있는 밀집도
SYSTEM  | I/O성능 및 사용율
  | CPU성능 및 사용율

이처럼 비용 기반 옵티마이저는 테이블, 컬럼, 인덱스, 시스템 정보들을 사용하여 최적의 실행 계획을 만들어 내지만 이런 통계정보의 경우 특정 시점에 취해 온 값을 기준으로 작성된 것으로 그 값의 영속성이 보장 되지 않는한 해당 계획은 일회성에 불과 하다. 다시 말해 *지속적으로 데이터가 입력, 수정, 삭제되는 데이터 베이스라면그 통계정보 역시 해당 시점에 적합한 형태로의 재도출이 필요*하다는 의미이다.

ORACLE에서는 이런 통계정보 생성을 위한 방법으로는 두가지가 존재한다.
 + 첫째, <font color="red">`ANALYZE`</font> 명령문을 사용하는 방법
 + 둘째, ORACLE이 제공하는 <font color="red">`DBMS_STATS`</font> 패키지를 활용하는 방법


###### 자동 통계정보 생성
> 통계 정보 생성 및 수행 시간을 Scheduler에 등록하여 일정 주기 마다 통계정보를 수집도록 지정할 수 있다.

START

    BEGIN
        DBMS_AUTO_TASK_ADMIN.ENABLE (
            client_name => ‘auto optimizer stats collection’ ,
            operation => NULL ,
            window_name => NULL );
    END ;

END

    BEGIN
        DBMS_AUTO_TASK_ADMIN.DISABLE (
            client_name => ‘auto optimizer stats collection’ ,
            operation => NULL ,
            window_name => NULL );
    END ;

이와 같은 자동 방식을 통해 통계정보를 생성시 관리자 명령 없이 주기적으로 통계 정보를 갱신함으로 관리효율을 높일 수 있다.

다만 시작과 종료 시간에 대한 계산을 해두지 않으면 서비스 호출이 많은 시간대에 통계정보를 수집하는 결과를 초래 할 수 있음으로 주의가 필요하다.


###### 수동 통계정보 생성

> 수동 통계 정보 생성의 경우 객체들에 대한 정확한 이해를 바탕으로 개별 관리를 하고자 하는 경우 주로 사용된다.
>
> <font color="red">`DBMS_STATS`</font> 패키지를 사용할 경우 데이터베이스, 스키마 및 계정, 테이블, 인덱스 단위로 구분하여 통계 정보를 수집하는 것이 가능하며 통계 정보 생성시 특정 테이블에 대한 통계정보 생성을 막는 LOCKING 기능도 설정 가능하다.
>
> 대용량 테이블의 크기를 고려하여 필요한 경우 TABLE과 INDEX를 별도로 분리하여 통계 정보를 수집하는것도 전략적으로 가능하다.


■특정 SCHEMA에 대한 통계 정보 생성 잠금 설정 및 해제

    EXEC DBMS_STATS.LOCK_SCHEMA_STATS(‘schema_name');
    EXEC DBMS_STATS.UNLOCK_SCHEMA_STATS(‘schema_name');


■특정 TABLE에 대한 통계 정보 생성 잠금 설정 및 해제

    EXEC DBMS_STATS.LOCK_TABLE_STATS(‘schema_name’, ’table_name');
    EXEC DBMS_STATS.UNLOCK_TABLE_STATS(‘schema_name’, ’table_name');

■특정 SCHEMA에 대한 통계 정보 생성

    EXEC DBMS_STATS.GATHER_SCHEMA_STATS(OWNNAME => ’schema_name’ , CASCASE => TRUE , ESTIMATE_PERCENT => 10 , DEGREE => 4);

■특정 TABLE에 대한 통계 정보 생성

    EXEC DBMS_STATS.GATHER_TABLE_STATS(’schema_name’ , ’table_name' , ESTIMATE_PERCENT => 5 , DEGREE => 6, CASCADE => FALSE );

■특정 INDEX에 대한 통계 정보 생성

    EXEC DBMS_STATS.GATHER_INDEX_STATS(’schema_name’ , ’index_name' , ESTIMATE_PERCENT => 5 , DEGREE => 6 );


위 명령문중

<font color="blue">`CASCADE OPTION`</font> : 해당 SCHEMA와 연관이 있는 모든 객체들에 대해서도 통계 정보를 생성 할지에 대한 OPTION.
<font color="blue">`ESTIMATE_PERCENT`</font> : 통계정보를 수집할 샘플 데이터의 비율.
<font color="blue">`DEGREE`</font> : 병렬 처리 정도.

을 의미한다.


 + **통계정보를 수집하였다면, 해당 정보중 NUM_ROWS 가 0 인 항목들을 삭제**

    통계정보를 수집한 결과로 각 테이블의 행 수 정보를 보여주는 NUM_ROWS의 경우 값이 없는 경우 아직 데이터 적재한 통계 정보로 사용하기에 적절치 않은 결과로 즉시 삭제 한다.

 + **METHOD_OPT : ‘FOR ALL COLUMNS SIZE 1'**

    ORACLE로 하여금 더 정확한 통계 정보를 도출 할 수 있도록 해주는 히스토그램 정보의 수집 방법을 제시 하는 옵션.

    여기서 1은 히스토그램을 별도로 수집하지 않겠다는 의미.

 + **ESTIMATE_PERCENT : SEGMENT 크기별 사이즈 지정**

    통계 정보 생성시 전체 세그먼트 데이터 중 몇 퍼센트를 가지고 통계 정보를 수집할 것인지는 지정하는 옵션.
    100에 가까울수록 수집 시간이 길어지고 정확도가 올라간다.

    하지만, 통계정보를 수집하는 시간이 지연되어 운영 중인 시스템의 서비스에 지장을 주는 일이 없도록 이 옵션값을 최적화 할 필요가 있다.


##### (2) OPTIMIZER, PARAMETER

 + **OPTIMIZER_MODE**

  Optimizer Mode를 결정하는 Parameter로 10g 이후 기본 값은 `ALL_ROWS` 이다.

 + **OPTIMIZER_DYNAMIC_SAMPLING**

  ORACLE이 SQL PARSING 작업을 하는 동안 통계 정보가 없는 객체들을 발견하면 통계 정보를 자동으로 수집하는 기능을 <font color="blue">`DYNAMIC SAMPLING`</font>이라 한다. ORACL 10g 이후 부터 사용 가능한 기능이며 기본 값은 <font color="red">`2 (사용)`</font>이다.

  선택 가능한 옵션은 0~10 까지 이며 주요 기능은 아래와 같다.

  > 0 : DYNAMIC SAMPLING 기능을 사용하지 않음
  > 2 : ORACLE 10g 이후 기본 값으로 통계 정보가 없는 모든 테이블의 통계 정보를 자동 수집
  > 4 : WHERE절에서 두 개 이상의 컬럼을 참조하고 있는 모든 테이블을 대상으로 통계 정보를 자동 수집
  > 10 : SQL에서 사용된 모든 테이블을 대상으로 통계 정보를 자동 수집

 + **_OPTIM_PEEK_USER_BIND**

  <font color="blue">`BIND PEEKING`</font> 이란 Bind Variable 사용하여 값을 입력 받는 SQL에 대해 처음 실행 시 입력된 값을 통해 세운 실행 계획을 보관하고 있다가 이후에 같은 SQL이 실행되면 바인드 변수 값에 상관 없이 이 실행 계획을 다시 사용하는 기능.
  데이터 비율이 고르지 않고 특정 데이터에 집중되어 있는 상황이라면 비사용을 권장.


  ##### (3) OPTIMIZER의 한계

 + **바인드 변수 사용의 한계**

  SQL을 작성할 때 Bind Variable를 활용하는 것은 일반적인 일이다. Bind Variable를 사용시 같은 SQL에 대해서는 실행 계획을 다시 활용할 수 있어 DBMS 성능을 향상 시킬 수 있기 때문이다.
  하지만 Bind Variable로 입력 될 값과 비교될 컬럼의 데이터 분포도가 다른 경우 이야기가 달라진다. 비교 컬럼의 데이터가 한쪽에 편중된 경우 지나치게 많거나 적은 데이터 위주로 실행 계획을 선택 할 수 있기 때문이다.
  때문에 Bind Variable의 입력될 값이 예측가능한 경우 입력 값에 따른 적절한 <font color="blue">`HINT`</font>를 선택 할 수 있다.

  ORACLE 11g 이후 버전의 경우 데이터 분포도를 고려한 실행 계획을 공유하는 <font color="red">***`ADAPTIVE CURSOR SHARING`***</font>이라는 기능을 사용하여 문제 해결이 가능하다.

 + **잘못된 비용 계산(Cardinality)의 한계**


      SELECT E.phone
      FROM   EMPLOYEE E
      WHERE  E.employee_no LIKE :EMP_NO||'%'
         AND E.employee_name LIKE :EMP_NAME||'%';


   위의 쿼리문에서는 두개의 조건절을 만족하는 사원의 전화번호를 검색하려고 한다.
   조건절에서 사용된 사원번호 칼럼과 사원이름 칼럼 각각의 히스토그램 정보를 수집했다고 하더라도, 두가지 조건을 모두 만족하는 데이터 수를 컬럼 각각의 통계정보를 통해서는 알 수가 없으므로 실제보다 높거나 낮은 비용으로 계산 될 수가 있다.

 + **동시성을 배제한 비용 계산의 한계**

  Optimizer의 COST 예측의 한계는 모든 SQL이 단독 실행되는 환경을 전제로 계산하다는 점이 있다.
  하지만 실행 운영 환경에서는 하나의 SQL만 실행 되는 경우가 드물고 동일 블록을 동시에 접근하는 상황의 경우 대기 상태에 빠질 수도 있다. 이렇듯 동시 실행으로 인한 부하 상황은 해당 모니터링을 통해서만 확인 가능하다보니 적절할 해결책을 필요로 한다.

 + **히스토그램의 한계**

  히스토그램의 정보를 수집 하기 위해 설정 할 수 있는 버킷의 수는 최대 254개 이다. 따라서 254개 이상의 값을 갖는 컬럼의 경우 비용 예측 결과가 정확하지 않을 수 있다. 또한 문자 데이터의 타입을 사용하는 경우, 최초 32개 문자에 대한 통계 정보만으로 히스토그램을 관리한다.

 + **날짜 유형에 대한 비용 예측의 한계**

   날짜 유형의 데이터를 날짜 데이터 타입이 아닌 문자 타입등으로 선언 할 경우, 오라클은 해당 타입에 따른 비용 계산 방식이 날짜 데이터와 달라지므로 주의가 필요하다. 날짜 데이터를 DATE타입으로 선언 할 경우 년/일/월에 대한 최대 값을 9999/12/31 까지만 존재하는 걸로 인식되지만, 문자타입의 경우는 9999/99/99를 최대 값으로 예측하여 비용 계산을 함으로 CARDINALITY를 계산하는 방식의 차이가 발생한다.

 + **통계정보의 한계**

  초기 적은 데이터를 가진 A라는 테이블이 통계 정보를 생성한 후, 분기별 배치 작업등을 통해 대량의 데이터가 발생한 경우. DBMS는 초기 통계정보 기준으로 동작 할 것이기 때문에 데이터 수가 급격하게 변하는 테이블의 경우 통계 정보 생성 주기에 유의할 필요가 있다.
